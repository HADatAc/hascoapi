# =====================
# HASCOAPI Configurations
# =====================

hascoapi {

   console {
      # the application's base host URL
      host="http://localhost:9000"

      # the url that the application is deployed
      host_deploy="http://localhost:9000"

      # The base URL that the application uses to send email
      base_url="http://localhost:9000"

      # the kb's base host URL -- usually, the application's base host URL without any port information
      kb="http://localhost"
   }

   repository {
	        # URL for metadata (RDF triplestore RDF) collection
	        # For fuseki in the local
	        triplestore="http://localhost:3030"
   }

   paths {
       ingestion="/var/hascoapi/"
   }
    

   templates {
        # Configure the template file for CSV header mappings
        # template_filename=template.hhear.conf
        template_filename=template.conf
   }

   https {
        enable=true
   }

}

# =====================
# APPLICATION Configurations
# =====================
# API base url
baseUrl="http://localhost:9000"

# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="?FicVyTZjgA]Us>iXsVu[1<fSfRTicvJp]CSHxpW@PATvICdao_10V3VNaDCD394"

pac4j.jwt.secret="qwertyuiopasdfghjklzxcvbnm123456"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# =====================
# Database Configurations
# =====================

# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# =====================
# Evolution Configurations
# =====================

# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# =====================
# Ebean Configurations
# =====================
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# =====================
# Mailer Configurations
# =====================
# ~~~~~
play.mailer {
  host = "smtp.office365.com" #smtp.office365.com smtp.mail.yahoo.com"#"smtp.gmail.com" // (mandatory)
  port=587 #465  #25 #587
  #ssl=yes
  tls=yes
  tlsRequired = yes #// (defaults to no)
  user = "user21email@gmail.com" #yahoo.com" # @gmail.com"   // (optional)
  password = "Password@21" #// (optional)
  debug = yes #// (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
  timeout = null #// (defaults to 60s in milliseconds)
  connectiontimeout = 300 #// (defaults to 60s in milliseconds)
  mock = no #// (defaults to no, will only log all the email properties instead of sending an email)
}



play {
  modules {
 # disabled += "play.api.libs.mailer.SMTPConfigurationModule"
 # enabled += "controllers.CustomMailerConfigurationModule"
  enabled += module.SecurityModule
  enabled += module.MyModule
 # enabled += play.filters.headers.SecurityHeadersModule
  }
}

play.org.hascoapi.console.http.errorHandler= controllers.CustomErrorHandler

play.http.filters = "filters.Filters"

# pac4j.security {
#    rules = [
#    {"/hascoapi/p.*" = {
#      clients = "FormClient"
#      authorizers = "isAuthenticated"
#    }}
#    {"/rest-jwt.*" = {
#      clients = "ParameterClient"
#    }}
#    {"/csrf.*" = {
#      clients = "AnonymousClient"
#    }}
#  ]
#}

pac4j.security {
  rules = [
#    {"/hascoapi/api.*" = {
#     clients = "HeaderClient"
#    }}
#    {"/hascoapi/test.*" = {
#      clients = "HeaderClient"
#    }}
  ]
}

play.http.session.sameSite = null
play.forms.binding.directFieldAccess = true


# Session conf
#session.maxAge=1h
play.http.session.maxAge=12h

# java config
jvm.memory=-Xmx3072M -Xms3072M

# filters
# play.http.filters=org.sirapi.filters.Filters
# play.filters.enabled += "play.filters.headers.SecurityHeadersFilter"

# for concurrency handling of facet search
# database.dispatcher {
#    executor = "thread-pool-executor"
#    throughput = 10
#    thread-pool-executor {
#        fixed-pool-size = 40
#    }
#}

# Allowed Hosts
play.filters.enabled += play.filters.hosts.AllowedHostsFilter
play.filters.hosts {
  allowed = ["."]
}

#for submitting form data
play.http.parser.maxDiskBuffer = 100MB
play.http.parser.maxMemoryBuffer = 64MB
parsers.anyContent.maxLength = 100MB

# Security headers filter configuration
headers {

  # The X-Frame-Options header. If null, the header is not set.
  frameOptions = "DENY"

  # The X-XSS-Protection header. If null, the header is not set.
  xssProtection = "1; mode=block"

  # The X-Content-Type-Options header. If null, the header is not set.
  contentTypeOptions = "nosniff"

  # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
  permittedCrossDomainPolicies = "master-only"

  # DEPRECATED: Content Security Policy.  If null, the header is not set.
  # This config property is set to null deliberately as the CSPFilter replaces it.
  contentSecurityPolicy = null

  # The Referrer-Policy header. If null, the header is not set.
  referrerPolicy = "origin-when-cross-origin, strict-origin-when-cross-origin"

  # If true, allow an action to use .withHeaders to replace one or more of the above headers
  allowActionSpecificHeaders = true
  }
